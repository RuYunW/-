/*实验10 排序

1、直接插入排序；√
2*、折半插入排序；√
3、希尔排序;√
4、冒泡排序√
5、简单选择排序√
6*、树型选择排序√
7*、堆排序

*/

#include<stdio.h>
#define N 8
#define MAX 100

//重置函数
void Reset(int *a)
{
	a[0] = 49; a[1] = 38; a[2] = 65; a[3] = 97;
	a[4] = 76; a[5] = 13; a[6] = 27; a[7] = 49;
}

//打印函数
void print(int *a)
{
	for (int i = 0; i < N; i++)
	{
		printf("%d  ", a[i]);
	}
	printf("\n");
}

//1.直接插入排序
void StraightInsertionSort(int *a)
{
	printf("直接插入排序如下：\n");
	int t = 0;
	int i, j;
	print(a);
	for (i = 1; i < N; i++)//i表示插入次数，共进行N-1次插入
	{
		t = a[i];
		if (a[i] < a[i - 1])//如果后<前
		{
			j = i - 1;
			while ((j >= 0) && (t<a[j]))
			{
				a[j + 1] = a[j];
				j--;
			}
			a[j + 1] = t;
		}
		else//如果后>=前
		{
			i++;
		}
		print(a);
	}

}

//*2.折半插入排序
void BinaryInsertionSort(int *a)
{
	int i, j;
	int t, low, high;
	printf("折半插入排序如下数据：");
	print(a);
	for (i = 0; i < N - 1; i++)//进行N-1次插入
	{
		if (a[i + 1] >= a[i])//如果后大于前，则排下个数
		{
			printf("第%d次排序：", i + 1);
			print(a);
			continue;
		}
		if (a[i + 1] < a[i])//如果后小于前，则折半查找排序
		{
			low = 0; high = i;
			while ((low < high) && (high>0))
			{
				if (a[i + 1] < a[(low + high) / 2])//如果比中间值小，插前
				{
					high = (low + high) / 2 - 1;
				}
				if (a[i + 1] >= a[(low + high) / 2])
				{
					low = (low + high) / 2 + 1;
				}
			}
			//while执行完得到low和high
			t = a[i + 1];
			for (j = i; j >= low; j--)
			{
				a[j + 1] = a[j];
			}
			a[low] = t;
		}
		printf("第%d次排序：", i + 1);
		print(a);
	}
}

//3.希尔排序
void ShellSort(int*a, int length)
{
	int increment;
	int i, j;
	int temp;
	for (increment = length / 2; increment > 0; increment /= 2) //用来控制步长,最后递减到1  
	{
		// i从第step开始排列，应为插入排序的第一个元素  
		// 可以先不动，从第二个开始排序  
		for (i = increment; i < length; i++)
		{
			temp = a[i];
			for (j = i - increment; j >= 0 && temp < a[j]; j -= increment)//希尔插入
			{
				a[j + increment] = a[j];//当temp即a[i]<a[j]时，一组后移
			}
			a[j + increment] = temp; //将第一个位置填上  
		}
	}
	print(a);
}

//4.冒泡排序
void BubbleSort(int *a)
{
	printf("冒泡排序如下数据：\n");
	print(a);
	int i, j, t;
	for (i = 0; i < N; i++)
	{
		for (j = 0; j < N - 1; j++)
		{
			if (a[j] > a[j + 1])//如果前>后，交换  前<=后，不换
			{
				t = a[j];
				a[j] = a[j + 1];
				a[j + 1] = t;
			}
		}
		printf("第%d趟排序结果为：", i + 1);
		print(a);
	}
	printf("最终排序结果为：\n");
	print(a);
}

//5.简单选择排序
void SimpleSelectionSort(int*a)
{
	printf("用简单选择排序如下数据：");
	print(a);
	int i, j;
	int min = a[0], t, minj;
	for (i = 0; i < N - 1; i++)
	{
		for (j = i; j < N; j++)
		{
			if (a[j]<min)
			{
				min = a[j];
				minj = j;
			}
		}
		t = a[i];
		a[i] = a[minj];
		a[minj] = t;
		min = a[i + 1];
		printf("第%d次排序结果为：", i + 1);
		print(a);

	}
	printf("最终排序结果为：\n");
	print(a);
}

//*6.树形选择排序
void TournamentSort(int *a)
{
	int b[2 * N];
	int result[N];
	int i, j, k,l;
	for (i = 0; i < N; i++)//叶节点赋值
	{
		b[2*N-1-i] = a[i];
	}
	

	for (k = 0; k < N; k++)
	{
		
		for (i = N; i > 1; i /= 2)//当N=8时，循环三波，比三层，i分别等于8/4/2
		{
			for (j = i * 2; j>i; j -= 2)//分别4/2/1次比较，即分解循环4/2/1次
			{
				if (b[j - 1] < b[j - 2])  b[(j - 2) / 2] = b[j - 1];
				else b[(j - 2) / 2] = b[j - 2];
			}
		}

		result[k] = b[1];//记录最小值

		for (l = N ; l < N*2; l++)//给最小值赋值MAX
		{
			if (b[l] == b[1])
			{
				b[l] = MAX;
				break;
			}
		}

	}
	print(result);
}
//*7.堆排序
void HeapSort(int*a)
{
	int b[2*N];
	int i, j, k;
	for (i = 0; i < N; i++)
	{

	}
}

int main()
{
	int a[N] = { 49, 38, 65, 97, 76, 13, 27, 49 };
	//StraightInsertionSort(a);
	//Reset(a);
	//BubbleSort(a);
	//Reset(a);
	//SimpleSelectionSort(a);
	//Reset(a);
	//ShellSort(a, N);
	//Reset(a);
	//BinaryInsertionSort(a);
	//TournamentSort(a);

	return 0;
}
